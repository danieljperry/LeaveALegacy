(mod (
    OWNER_PUBKEY       ; (curryed) The public key of the address that is allowed to spend the coin before time timelock expires
    WAIT_TIME          ; (curryed) The amout of time before the timelock expires, in seconds
    INNER_PUZZLE_HASH  ; (curryed) The hash of another puzzle, with curryed arguments. Can be any puzzle, including another Legacy Coin. Can be '()' for an empty puzzle.
    inner_puzzle       ; The inner puzzle with curryed arguments, only to be revealed when attempting to spend the coin. Can be '()' for an empty puzzle.
    inner_solution     ; The solution to the inner puzzle. Can be '()' for an empty solution
    spend_pubkey       ; The public key of the address that is attempting to spend the coin; can be same as OWNER_PUBKEY, or different
    )

    (include condition_codes.clib)
    (include sha256tree1.clvm)

    ; Make sure the inner puzzle's treehash matches the hash that was curryed in.
    ; If they match, then execute the inner puzzle.
    ; If they don't match, raise an error and exit.
    (defun-inline verify_inner (INNER_PUZZLE_HASH inner_puzzle inner_solution)
        (if (= INNER_PUZZLE_HASH (sha256tree1 inner_puzzle))
            (a inner_puzzle inner_solution)
            (x "Inner puzzle does not match inner puzzle hash.")
        )
    )
    
    ; check_for_inner_hash will first assert the timelock associated with the current puzzle.
    ; This is done in lieu of having an oracle that can verify the death of the coin's owner.
    ; If there is an inner hash, then verify that the supplied inner puzzle's hash matches the curried hash.
    ; If not, then execute whatever inner puzzle has been supplied without any verification.

    (defun-inline check_for_inner_hash (WAIT_TIME INNER_PUZZLE_HASH inner_puzzle inner_solution)
        (c
            (list ASSERT_SECONDS_RELATIVE WAIT_TIME)
        
            (if INNER_PUZZLE_HASH
                (verify_inner INNER_PUZZLE_HASH inner_puzzle inner_solution)
                (a inner_puzzle inner_solution)
            )
        )
    )

    ; sign_and_execute_inner will sign with the spend_pubkey and the hash of the inner puzzle.
    ; It then executes the inner puzzle and solution provided.
    ; There is no timelock associated with this method, but one may have been asserted previously.
    (defun-inline sign_and_execute_inner (spend_pubkey inner_puzzle inner_solution)
        (c
            (list AGG_SIG_ME spend_pubkey (sha256tree1 inner_puzzle))
            (a inner_puzzle inner_solution)
        )
    )

    ; Main method
    ;
    ; Check if the spend_pubkey matches the OWNER_PUBKEY.
    ;
    ; If yes, then the owner may spend the coin immediately,
    ; pending any outer puzzle assertions.
    ;
    ; If no, then see if there is an inner hash.

    (if (= OWNER_PUBKEY spend_pubkey)
        (sign_and_execute_inner spend_pubkey inner_puzzle inner_solution)
        (check_for_inner_hash WAIT_TIME INNER_PUZZLE_HASH inner_puzzle inner_solution)
    )
)